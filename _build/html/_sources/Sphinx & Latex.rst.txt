🔸 参考:
================================================================================


★★★★★ https://www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation/index.html

http://wiki.jerrypeng.me/rest-tjlug/

★★★★★ Sphinx 使用手册:  http://zh-sphinx-doc.readthedocs.io/en/latest/markup/



🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

👹 英文 不换行啊. 明明是换行的. 到了网页中就不换行了...
因为浏览器会将此类换行解释为空格，于英文等无碍，而于中文则有碍观瞻。
要在行首 添加 | 符号就可以换行了..
https://gxnotes.com/article/119773.html





🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

- 一级标题： = 
- 二级标题： - 
- 三级标题： + 
- 四级标题： ^



🔸 行内标记

    一个星号表示斜体: *text*
    两个星号表示粗体: **text**
    两个反斜号表示行内代码: ``text``

        不能被嵌套,
        内容中不需要空白字符, 如: * text* , 这个是错误的写法,
        使用反斜杠进行转义: thisis\ *one*\ word








🔸 Sphinx 主题
================================================================================

    http://www.sphinx-doc.org/en/stable/theming.html



🔸 表格
================================================================================


=====  =====  =======
  A      B    A and B
=====  =====  =======
False  False  False
True   False  False
False  True   False
True   True   True
=====  =====  =======









🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

书本是以章节为单位的! 一般来说 一个章节一个 .rst文件.
其实没必要弄章节.一般也就几千行. 分成多个文件反而太分散了


我们刚才在目录下已经添加了chapter1.rst, chapter2.rst和chapter3.rst 三个章节的文档源码，
但是初建编译时，并不会被编译进去，还得在index.rst中把这些文件包含进来。在rst中配置如下：

然后把章节包含到 index.rst 中.

Contents:

.. toctree:: 
:maxdepth: 2 
:numbered:

chapter1 
chapter2 
chapter3


其中，toctree用来于产生目录表，numbered表示章节带标题，maxdepth表示目录中只显示几层标题





🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸
实例.

github 网页创建新项目:下载到本地.


❗️❗️❗️ 项目初始化   sphinx-quickstart ❗️❗️❗️
❗️❗️❗️ 项目初始化   sphinx-quickstart ❗️❗️❗️
❗️❗️❗️ 项目初始化   sphinx-quickstart ❗️❗️❗️

输入项目名 + 作者 + 语言 zh_CN 其他全部默认.

sphinx只要修改下主题. 其他完全不用动!!

❗️❗️❗️ vi conf.py   85行 修改:    html_theme = "sphinx_rtd_theme"     ❗️❗️❗️
❗️❗️❗️ vi conf.py   85行 修改:    html_theme = "sphinx_rtd_theme"     ❗️❗️❗️
❗️❗️❗️ vi conf.py   85行 修改:    html_theme = "sphinx_rtd_theme"     ❗️❗️❗️


基本完成，使用 make html 命令就可以生成html形式的文档了。
本地预览:
浏览器 打开文件 ➜  file:///Users/v/Desktop/SS-SSR/_build/html/index.html
就可以看到网页了. 但是现在什么内容都内有. 
我们要新加个文件进去.

创建文件:
SS_SSR.rst
内容随意.

❗️❗️❗️ index.rst ❗️❗️❗️

 .. toctree::
    :maxdepth: 2
    :caption: Contents:

改成 

 .. toctree::
    :maxdepth: 2
    :caption: Contents:

    SS_SSR

这样就可以了.
注意
SS_SSR上边一个空行. 
SS_SSR左边是3个空格. 
SS_SSR右边还有一个空格的!!!


重新生成html
可能会有报错... 没关系.
SS_SSR.rst 至少要有一个标题才行的.
This is a Title
===============
文章里添加 上面两行就是一个标题.

下面刷新网页. 就出来了.
但是现在文章的结构不行. 
你要自己设置 标题. 
这些只是语法问题. 不难的. 
下面我们怎么才能把书本放到网络.
我们这里用github.
把项目上传同步到github去先.

🔸 设置 ss-ssr 项目 
--------------------------------------------------------------------------------  
github ➜ ss-ssr 项目 ➜ settings ➜ integrations & services ➜ Add services ➜ ReadtheDocs


🔸 注册 Read the Docs
--------------------------------------------------------------------------------  

 　https://readthedocs.org/

注册. 然后绑定github. ➜ import a project ➜ 选择项目 ➜ 阅读文档 
http://ss-ssr.readthedocs.io/en/latest/
就出现了.... 
当然 有个小小的广告. 免费服务么.... 无所谓了...
现在整个流程都清楚了.
下面就来完善文档结构了额.

网页左边有两个结构.
每个标题都会显示在网站中. 在sphinx中 ========== 的上面一行就是标题
每个子标题 会折叠在标题中.在sphinx中 ---------- 的上面一行就是子标题
两级别的标题.不太够啊.. 最好是有3级别的..
这个.... 好像只能自己在标题前面添加符号来分别了.
如❤️+标题名. 是一级标题.  🔸+标题名是二级标题.  
最后来个二级子标题.就有三级别的标题了.



还有个就是高亮.















对于一些一两篇文章就能写清楚的可以记笔记或写博客， 
但是如果要写成一个系列的，不如写成一本书的形式，更美观，也更系统。

可方便的本地编辑. 还可以方便的分享到网络.
最终架构: 

经过一些比较和调查，最终锁定 Sphinx + GitHub + ReadtheDocs 作为文档写作工具。
用 Sphinx 生成文档，GitHub 托管文档，再导入到 ReadtheDocs。

Sphinx 使用手册:  https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html

写书环境!!!   知识环境 必须写成书. 结构清晰. 方便自己.



🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

🔸 简介

Sphinx 是一种工具，它允许开发人员以纯文本格式编写文档，以便采用满足不同需求的格式轻松生成输出。
这在使用 Version Control System 追踪变更时非常有用。
纯文本文档对不同系统之间的协作者也非常有用。纯文本是当前可以采用的最便捷的格式之一。

虽然 Sphinx 是用 Python 编写的，并且最初是为 Python 语言文档而创建，但它并不一定是以语言为中心，
在某些情况下，甚至不是以程序员为中心。Sphinx 有许多用处，比如可以用它来编写整本书！

可以将 Sphinx 想像成为一种文档框架：它会抽象化比较单调的部分，并提供自动函数来解决一些常见问题，比如突出显示标题索引和特殊代码（在显示代码示例时），以及突出显示适当的语法。

Sphinx 使用 reStructuredText 标记语法（和其他一些语法）来提供文档控制。



Sphinx是一个基于SQL的全文检索引擎；
其实数据库本身就可以查询数据的. 那么为什么还要弄个 Sphinx 全文检索引擎呢.
当数据以大量文本信息为主的时候. Sphinx 比数据库自带的检索强大很多.
全文搜索引擎专注于搜索，指标是海量数据的查询和索引建立；
数据库更加专注于数据本身，对业务所需要的高并发和高吞吐不那么关注。

a). 在全文检索领域，入法眼的就3个，lucene，sphinx，xapian。


sphinx是检索引擎，他的关键能力还在于关键词的匹配上即文本检索。
而搜索引擎除了检索系统外还包括更多类似数据挖掘，缓存，相关性预测，去重，纠错以及更复杂的数学模型等等。
当然围绕sphinx，我们是可以搭建一套搜索引擎。




    Sphinx 是一种文档工具，它可以令人轻松的撰写出清晰且优美的文档.
    可以导出HTML 和 PDF
    生成HTML 简单. 但是要生成PDF 就得额外安装软件
    要生成pdf的话，需要先安装Latex，推荐使用MacTex，它的安装包约有2GB，安装需要4GB的空间。







可以进行搜索!!! 
可以连接mysql... 



.. toctree::
   :maxdepth: 2       深度为2表示文档必须有一个标题. 





🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸
🔸 Sphinx 语法:

        注意标记段一般要与前一段落用空行格开，标记段结束要与下一段落用空行格开，



🔸 章节编号

如果希望在HTML为章节编号，仅需给出选项 numbered . 例如:


.. toctree::
   :numbered:

   foo

编号以标题 foo 开始. foo 是一个章节! 




🔸 大标题

This is a Title
===============
That has a paragraph about a main subject and is set when the '='
is at least the same length of the title itself.


🔸 小标题

Subject Subtitle
----------------
Subtitles are set with '-' and are required to have the same length 
of the subtitle itself, just like titles.
 


🔸 无序列表
--------------------------------------------------------------------------------   
 * Item Foo
 * Item Bar

🔸 有序列表
--------------------------------------------------------------------------------    
 #. Item 1
 #. Item 2
 

Inline Markup
-------------
Words can have *emphasis in italics* or be **bold** and you can define
code samples with back quotes, like when you talk about a command: ``sudo`` 

gives you super user powers!
正如您所看到的，纯文本格式的语法非常容易读懂。在创建特定格式（如 HTML）时，标题会成为主要目标，其字体会比副标题大一些（理应如此），并且会对编号列表进行适当的编号。您已经拥有一些非常强大的功能。添加更多的项或更改编号列表中的顺序不会影响到编号，而通过替换使用的下划线可以改变标题的重要性。




框架使用了一个目录结构来分离源文件（纯文本文件）和构建（指生成的输出）。例如，如果使用 Sphinx 从文档源中生成一个 PDF，那么该文件会放置在构建目录中。您可以更改此行为，但为了获得一致性，我们还是保留了默认格式。






🔸 安装 Sphinx
    pip install sphinx sphinx-autobuild sphinx_rtd_theme

    ⦿ 查看版本: sphinx-build --version
    ⦿ 语法:     Usage: sphinx-build [options] sourcedir outdir [filenames...]


🔸 创建Sphinx项目
    sphinx-quickstart
        会进入一个设置向导，根据向导一步一步设置文档项目，其实必填项只有项目名称，作者和版本，其他设置都可以一路回车：

            文档根目录(Root path for the documentation)，默认为当前目录(.)
            是否分离文档源代码与生成后的文档(Separate source and build directories): y
            模板与静态文件存放目录前缀(Name prefix for templates and static dir):_
            项目名称(Project name) : EvaEngine
            作者名称(Author name)：AlloVince
            项目版本(Project version) : 1.0.1
            文档默认扩展名(Source file suffix) : .rst
            默认首页文件名(Name of your master document):index
            是否添加epub目录(Do you want to use the epub builder):n
            启用autodoc|doctest|intersphinx|todo|coverage|pngmath|ifconfig|viewcode：n
            生成Makefile (Create Makefile)：y
            生成windows用命令行(Create Windows command file):y


    最后会生成Sphinx一个文档项目必需的核心文件.

    ⦿ 项目结构
        .
        ├── Makefile
        ├── _build
        ├── _static
        ├── _templates
        ├── conf.py
        ├── hello.rst
        ├── index.rst
        └── make.bat



Makefile：编译过代码的开发人员应该非常熟悉这个文件，如果不熟悉，那么可以将它看作是一个包含指令的文件，在使用 make 命令时，可以使用这些指令来构建文档输出。
_build：这是触发特定输出后用来存放所生成的文件的目录。
_static：所有不属于源代码（如图像）一部分的文件均存放于此处，稍后会在构建目录中将它们链接在一起。
conf.py：这是一个 Python 文件，用于存放 Sphinx 的配置值，包括在终端执行 sphinx-quickstart 时选中的那些值。
index.rst：文档项目的 root 目录。如果将文档划分为其他文件，该目录会连接这些文件。











向导中的所有设置都保存在conf.py中，可以随时调整。



🔸 添加文章: 
根目录添加 hello.rst
hello,world
=============



然后修改
index.rst 修改如下:

Contents:
.. toctree::
   :maxdepth: 2
   hello



🔸 更改主题

vi conf.py
html_theme = "sphinx_rtd_theme"




🔸 预览效果





🔸 其他主题.
http://django-redis-chs.readthedocs.io/zh_CN/latest/#id14
这个结构就很好..
但是这是什么主题呢.. 看源码去.

https://github.com/bluedazzle/django-redis-doc-chs




🔸 Sphinx 实时预览工具: Marboo Pro
    https://amoblin.gitbooks.io/marboo-guide/content/zh-cn/04-document-generator-settings/4.3%20sphinx.html


- 生成HTML
- 修改 marboo 配置

















🔸 让Sphinx latex支持中文
然后修改 conf.py 文件

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}


替换成：

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
'papersize': 'a4paper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '12pt',

'classoptions': ',english',
'inputenc': '',
'utf8extra': '',

# Additional stuff for the LaTeX preamble.
'preamble': '''
\usepackage{xeCJK}
\usepackage{indentfirst}
\setlength{\parindent}{2em}
\setCJKmainfont[BoldFont=SimHei, ItalicFont=STKaiti]{SimSun}
\setCJKmonofont[Scale=0.9]{Consolas}
\setCJKfamilyfont{song}[BoldFont=SimSun]{SimSun}
\setCJKfamilyfont{sf}[BoldFont=SimSun]{SimSun}
'''
}



首先你需要在Sphinx项目目录执行 make latex 命令生成latex，再使用 xelatex *.tex 生成PDF文件。具体步骤如下：

$ make latex
make latexpdf



$ cd _build/latex
$ xelatex *.tex
$ open *.pdf




















🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

🔸LaTeX 
    1. LaTeX是一类用于编辑和排版的软件，用于生成PDF文档。
    2. 方便美观的数学公式编辑.
    3. 论文、简历利器

用LaTex刷简历，最好用现成的模板，不然从0开始就是找虐。




用LaTex写简历或者paper等，已经非常常见的。
在美国，甚至直接有人用LaTeX上课做笔记。所以，如果想让自己的简历显得professional一点，建议用LaTeX写。 

❗️❗️❗️ sharelatex网站上一堆模板，即改即显示即用即下载。❗️❗️❗️
❗️❗️❗️ sharelatex网站上一堆模板，即改即显示即用即下载。❗️❗️❗️
❗️❗️❗️ sharelatex网站上一堆模板，即改即显示即用即下载。❗️❗️❗️
ShareLatex是一个在线编辑Latex的网站，代码开源在Github上。你可以使用PC端的Latex，但是如果你无法遇到各种各样的编译问题，觉得麻烦的时候，ShareLaTeX绝对是你的福音。

What is LaTeX：LaTeX类似于html脚本语言，很容易上手。虽然也需要“编译”等才能生成pdf或者ps文档，但是实际上网上很有很多很漂亮、很专业的模板，我们只需要将自己相应的信息填入相应的位置即可。这样，生成的pdf、ps文档要好看得多。所以，很多学术会议都有自己的LaTeX模板，投稿者只需要把相应的内容复制到相应的代码段中，生成的pdf文件就是又漂亮、又符合要求的论文，而不需要用word反复修改格式。当然，如果你要自己从头开始写一个完整的LaTeX代码，而不用模板，那么还是很麻烦的.......不知道我解释清楚没有......P.S.实际上，有的美国学生（当然，主要以计算机系的学生为主），鄙视用word的。因为word收到攻击的可能性大，而且也不好看，这种人比较geek。最近有关于LaTeX的课程作业，发现LaTeX确实不错。再看当年申请时候用MS Word生成的pdf，顿时觉得很不专业，很丑。当然，因为是新生申请，所以没大碍。但是如果之前就会，那么这就很好了。 


How to use LaTeX： 
1、到网上搜索LaTeX的简历模板，推荐http://rpi.edu/dept/arc/training/latex/resumes/。 
2、将.tex文件下载下来，用记事本打开进行编辑，即替换掉他人的信息，将自己的信息替换到相应的位置。 
3、编译、运行、生成pdf。本来这一步需要专门的编译器如Lyx等的，但是发现有一个在线编译的好东东http://nirvana.informatik.uni-halle.de/~thuering/php/latex-online/latex.php?sprachauswahl=2&aufruf=22103。所以：1）将之前在.tex文件中修改好的代码复制到该网页的source code空白处，output format设置为pdf就可以了。2）点击compile进行编译（生成div文件）。3）点击下面红色的“PDF-Format! ”，这样就可以看到生成的pdf了，然后保存到自己的电脑上。 
Then, it's done~ 

但愿对各位同学有用。而且以后到了美国，一般都可能要用LaTeX的。 





🔸 sharelatex 
在线编辑. 个人免费. https://cn.sharelatex.com/
一系列模板... 省时省力..免去安装latex的麻烦.
还能在线预览pdf.还能直接下载!!!


如果只是简历制作. 推荐用在线编辑器. 不然下载个4G的 LaTex 也麻烦..
本地编辑器适合老师用来写课件.或者论文.



🔸 模板:








🔸LaTeX 文档编辑


⦿ 编辑器选择
    word 文档编辑需要用 word/pages 打开, latex文档也需要特别的软件.
    强烈推荐用 VS Code 安装个扩展就可以用了

⦿ LaTeX Language Support 扩展安装: 
    这个插件为VS Code提供了LaTeX语言支持。
    VS Code 菜单 ➜ “扩展” ➜ 安装


⦿ LaTeX Wokrshop 扩展安装

    这是主要的一个插件，提供了一个编译、智能提示、代码片段、引用提示的环境。
    安装完成已经可以使用了.但我们最好还要配置一下


⦿ LaTeX Wokrshop 扩展配置

打开VS Code > 首选项 > 设置
可以看到左边是可供调整的设置选项，右边用户设置区，分两种，用户设置和工作区设置。
用户设置会覆盖默认设置，并应用于所有工作区、项目，而工作区设置会覆盖用户设置，但仅在此项目中产生作用，我们要修改的是以下设置：

"latex-workshop.latex.toolchain": [
    {
        "command": "xelatex",
        "args": [
            "-synctex=1",
            "-interaction=nonstopmode",
            "-file-line-error",
            "-pdf",
            "%DOC%"
        ]
    }





还可以通过LaTeX Workshop:View PDF in new tab来达到如下效果：






⦿ 
    3. 有很多现成的模板!!! 
        示例模板: https://github.com/xueruini/thuthesis/releases
        下载解压 里面有很多文件.  其中 的 main .tex 后缀的就是Latex文档.
        我们用 vs code 打开这个文件.
        怎么实现PDF效果预览呢. 







🔸LaTeX 文档导出

⦿ 安装: 
    Mac 下的 LaTeX 其实有另一个名字: MacTex
    请到 http://www.tug.org/mactex/mactex-download.html 下载安装.

⦿ 使用:






















🔸 Sphinx直接编译输出PDF

使用sphinx输出pdf文档需要安装额外的插件。可以使用rst2pdf，它是一个Python开发的插件，安装和使用都比较方便。

安装rst2pdf

easy_install rst2pdf
在conf.py中配置rst2pdf

添加rst2pdf扩展

extensions = ['rst2pdf.pdfbuilder']
增加pdf文档的变量

# index - master document
# rst2pdf - name of the generated pdf
# Sample rst2pdf doc - title of the pdf
# Your Name - author name in the pdf
pdf_documents = [('index', u'rst2pdf', u'Sample rst2pdf doc', u'Your Name'),]
编译pdf文档

make pdf
由于sphinx不支持中文，要通过rst2pdf输出包含中文的PDF文档有点麻烦，需要通过更改设置能够支持中文的字体的方式实现。这里不采用这种方式，使用latex来实现输出中文文档。



通过Latex输出中文PDF

安装latex可以选择完整安装，和安装latex-base版本。完整安装仅安装包就有约2.7G，latex-base是一个基础包，安装包100M左右，安装需要400M不到的空间。我们目前仅需要通过latex输出PDF文档，所以不需要安装完整安装。使用latex-base就可以了。但是latex-base安装后，不能直接使用，还需要一些额外操作才能正常支持中文格式。

Latex在Mac OS中叫MacTex.



安装BasicTex

从官网下载BaisicTex安装包，下载链接：http://tug.org/cgi-bin/mactex-download/BasicTeX.pkg
下载完成后，直接双击安装即可。

坑：安装完成后，相应工具集的路径并不会被添加到环境变量中，所以这时直接执行相应工具，或配置编译，会报找不到相应工具的错误。

添加工具路径到环境变量$PATH中。工具路径一般在/usr/local/texlive/2016basic/bin/universal-darwin/ (注： ”2016basic“是我安装的版本，如果你安装的版本不同这个文件的名字可能不同。）

1）修改.bash_profile, 添加如下行：

export PATH=$PATH:/usr/local/texlive/2016basic/bin/universal-darwin/
2）使修改生效

source ~/.bash_profile


安装一些额外的tex包

安装完成后，如果你直接开始配置sphinx的配置文件，编译pdf，你可能会遇到很多错误。这是因为我们只是安装的了basic的latex包，要支持中文pdf的输出，还需要一些额外的包。

MacTex提供了一个叫tlmgr的包管理工具，我们可以直接通过这个工具安装需要的包。BasicTex安装后，这个工具也被安装到了前面提到的工具路径中。因为我们已经添加了路径到环境变量中，所以可以直接执行这个命令了。

更新tlmgr

sudo tlmgr update --self
安装相应的工具

需要安装的工具有： titlesec、framed、threeparttable、wrapfig、multirow、enumitem、bbding、titling、tabu、mdframed、tcolorbox、textpos、import、varwidth、needspace、tocloft、ntheorem、environ、trimspaces、collection-fontsrecommended、capt-of、eqparbox、cjk

sudo tlmgr install titlesec framed threeparttable wrapfig multirow enumitem bbding titling tabu mdframed tcolorbox textpos import varwidth needspace tocloft ntheorem environ trimspaces collection-fontsrecommended capt-of eqparbox cjk



修改配置文件 config.py

在latex_elements = {...}中添加如下内容：

'papersize': 'a4paper',
'preamble': '''
\hypersetup{unicode=true}
\usepackage{CJKutf8}
\DeclareUnicodeCharacter{00A0}{\\nobreakspace}
\DeclareUnicodeCharacter{2203}{\ensuremath{\exists}}
\DeclareUnicodeCharacter{2286}{\ensuremath{\subseteq}}
\DeclareUnicodeCharacter{2713}{x}
\DeclareUnicodeCharacter{27FA}{\ensuremath{\Longleftrightarrow}}
\DeclareUnicodeCharacter{221A}{\ensuremath{\sqrt{}}}
\DeclareUnicodeCharacter{221B}{\ensuremath{\sqrt[3]{}}}
\DeclareUnicodeCharacter{2295}{\ensuremath{\oplus}}
\DeclareUnicodeCharacter{2297}{\ensuremath{\otimes}}
\\begin{CJK}{UTF8}{gbsn}
\AtEndDocument{\end{CJK}}
'''
注：\n和\b都是python中的转义字符，所以配置中的\nobreakspace和\begin都需要使用两个\\。

编译

一切就绪后，执行make latexpdf就直接可以在build/latex目录下生产pdf文档。

注：编译过程中可能还会遇到报! Undefined control sequence.的错误，博主直接回车忽略了此错误，仍然能正确生成中文PDF，所以没有对此错误做深入研究。





